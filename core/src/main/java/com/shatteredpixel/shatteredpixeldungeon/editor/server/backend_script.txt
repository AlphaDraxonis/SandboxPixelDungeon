const PREVIEW_FOLDER = "1H3S5I9mLo55qzmdSzidUvQNZM3INHinp";
const FULL_DUNGEON_FOLDER = "1IDqdDFR9Wip5WP23FpWZ8RvBb7mMfkkE";

const USER_ID_FOLDER = "1d0SinmQznVX5ii8XmxGXrdyy9T8gNxrQ";
const BANNED_USER_FOLDER = "1C5RCpO7W0-15ajNnskZSnOpz3ksOjyrN";

const BUG_REPORT_FOLDER = "1oylaCmD9hQ2-6QsZ3g9SuieM5WZeY66K";


function doPost(e) {
  if (e.parameter.action === "uploadStart") {

    console.log("dungeon upload start");

    const user = e.parameter.userID;
    const userIDFileContent = {
      id1: hashUserIDOne(user),
      id2: hashUserIDTwo(user),
    };

    if (isUserBanned(userIDFileContent.id1, userIDFileContent.id2)) return ContentService.createTextOutput("banned")
      .setMimeType(ContentService.MimeType.TEXT);

    const folderID = createDirectory(e.parameter.title, FULL_DUNGEON_FOLDER);

    const preview = {
      title: e.parameter.title,
      description: e.parameter.description,
      dungeonID: folderID,
      version: e.parameter.version,
      int_version: e.parameter.int_version,
      uploader: e.parameter.uploader,
      difficulty: e.parameter.difficulty,
      upload_time: new Date().getTime(),
      userHash: userIDFileContent.id1.substring(0, 10),
    };
    uploadFile(JSON.stringify(preview), preview.upload_time + "_" + folderID, "", PREVIEW_FOLDER, false);

    uploadFile(JSON.stringify(userIDFileContent), folderID, "", USER_ID_FOLDER, false);

    //tzzsendNotificationEmail(e.parameter.title, "Uploaded", e.parameter.description, e.parameter.int_version);

    return ContentService.createTextOutput(true.toString() + folderID)
      .setMimeType(ContentService.MimeType.TEXT);
  }
  else if (e.parameter.action === "uploadFile") {

    console.log("dungeon upload file");

    const user = e.parameter.userID;
    const userIDs = {
      id1: hashUserIDOne(user),
      id2: hashUserIDTwo(user),
    };

    if (isUserBanned(userIDs.id1, userIDs.id2)) return ContentService.createTextOutput("banned")
      .setMimeType(ContentService.MimeType.TEXT);

    const folderID = e.parameter.folderID;

    if (!isCreator(folderID, userIDs.id1, userIDs.id2)) return ContentService.createTextOutput("not the creator!")
      .setMimeType(ContentService.MimeType.TEXT);


    const fileName = e.parameter.fileName;

    uploadFile(e.parameter.content, fileName, "", folderID, true);

    return ContentService.createTextOutput(true.toString() + folderID)
      .setMimeType(ContentService.MimeType.TEXT);
  }
  else if (e.parameter.action === "updateStart") {

    console.log("dungeon update start");

    const user = e.parameter.userID;
    const userIDFileContent = {
      id1: hashUserIDOne(user),
      id2: hashUserIDTwo(user),
    };

    if (isUserBanned(userIDFileContent.id1, userIDFileContent.id2)) return ContentService.createTextOutput("banned")
      .setMimeType(ContentService.MimeType.TEXT);

    let folderID = e.parameter.folderID;
    const changeFiles = e.parameter.changeFiles === "true";

    let new_int_version;
    if (changeFiles) {
      new_int_version = e.parameter.int_version;
    } else {
      new_int_version = readIntVersion(folderID);
    }

    if (!deleteDungeon(folderID, userIDFileContent.id1, userIDFileContent.id2, changeFiles))
      return ContentService.createTextOutput(false.toString())
        .setMimeType(ContentService.MimeType.TEXT);

    if (changeFiles) {
        folderID = createDirectory(e.parameter.title, FULL_DUNGEON_FOLDER);
    }

    const preview = {
      title: e.parameter.title,
      description: e.parameter.description,
      dungeonID: folderID,
      version: e.parameter.version,
      int_version: new_int_version,
      uploader: e.parameter.uploader,
      difficulty: e.parameter.difficulty,
      upload_time: new Date().getTime(),
      userHash: userIDFileContent.id1.substring(0, 10),
    };
    uploadFile(JSON.stringify(preview), folderID, "", PREVIEW_FOLDER, false);

    uploadFile(JSON.stringify(userIDFileContent), folderID, "", USER_ID_FOLDER, false);

    //sendNotificationEmail(fileName, "Updated", e.parameter.description, new_int_version);

    return ContentService.createTextOutput(true.toString() + folderID)
      .setMimeType(ContentService.MimeType.TEXT);

  }
  else if (e.parameter.action === "bug_report") {

    console.log("bug report");

    const user = e.parameter.userID;

    if (isUserBanned(hashUserIDOne(user), hashUserIDTwo(user))) return ContentService.createTextOutput("banned")
      .setMimeType(ContentService.MimeType.TEXT);

    const fileName = e.parameter.fileName;

    let dungeon = e.parameter.dungeon;

    let dungeonID = "none"
    if (dungeon !== "null") {
      dungeonID = uploadFile(dungeon, fileName, ".dun", BUG_REPORT_FOLDER, true);
    }

    const preview = {
      title: e.parameter.title,
      description: e.parameter.description,
      version: e.parameter.version,
      dungeonFile: dungeonID,
      upload_time: new Date().getTime(),
    };
    uploadFile(JSON.stringify(preview), fileName, ".txt", BUG_REPORT_FOLDER, false);

    sendNotificationEmail(fileName, "Bug report", e.parameter.description, e.parameter.version);

    return ContentService.createTextOutput(true.toString())
      .setMimeType(ContentService.MimeType.TEXT);

  }
  else {
    return ContentService.createTextOutput("Invalid action: " + e.parameter.action);
  }
}

function doGet(e) {
  if (e.parameter.action === "getPreviewList") {
    const result = listFiles(PREVIEW_FOLDER, e.parameter.page, e.parameter.perPage);
    return ContentService.createTextOutput(result)
      .setMimeType(ContentService.MimeType.JSON);
  }
  else if (e.parameter.action === "downloadStart") {

    const userID = e.parameter.userID;
    const folderID = e.parameter.folderID;

    const folder = DriveApp.getFolderById(folderID);

    const fileIDs = getAllFileIdsInFolder(folder);

    fileIDs.unshift({creator: isCreator(folderID, hashUserIDOne(userID), hashUserIDTwo(userID))});

    return ContentService.createTextOutput(JSON.stringify(fileIDs))
      .setMimeType(ContentService.MimeType.JSON);
  }
  else if (e.parameter.action === "downloadFile") {

    const content = getFileContent(e.parameter.fileID);
    return ContentService.createTextOutput(content)
      .setMimeType(ContentService.MimeType.TEXT);

  }
  else if (e.parameter.action === "isCreator") {
    const userID = e.parameter.userID;

    const isCorrect = isCreator(e.parameter.dungeonID, hashUserIDOne(userID), hashUserIDTwo(userID));
    return ContentService.createTextOutput(isCorrect.toString())
      .setMimeType(ContentService.MimeType.TEXT);
  }
  else if (e.parameter.action === "deleteDungeon") {

    const user = e.parameter.userID;
    const userIDFileContent = {
      id1: hashUserIDOne(user),
      id2: hashUserIDTwo(user),
    };
    if (isUserBanned(userIDFileContent.id1, userIDFileContent.id2)) return ContentService.createTextOutput("banned")
      .setMimeType(ContentService.MimeType.TEXT);

    const result = deleteDungeon(e.parameter.dungeonID, userIDFileContent.id1, userIDFileContent.id2, true);
    return ContentService.createTextOutput(result.toString())
      .setMimeType(ContentService.MimeType.TEXT);
  }
  else {
    return ContentService.createTextOutput("Invalid action: " + e.parameter.action);
  }
}

function createDirectory(name, parentDirectory) {
  const folder = DriveApp.getFolderById(parentDirectory);
  return folder.createFolder(name).getId();
}

function uploadFile(content, fileName, fileExtension, parentFolderID, compress) {

  let folders = fileName.split('/');
  let parentFolder = DriveApp.getFolderById(parentFolderID);

  for (let i = 0; i < folders.length - 1; i++) {
    let folderName = folders[i];
    let subFolder;

    let subFolders = parentFolder.getFoldersByName(folderName);
    if (subFolders.hasNext()) {
      subFolder = subFolders.next();
    } else {
      subFolder = parentFolder.createFolder(folderName);
    }
    parentFolder = subFolder;
  }

  let finalFileName = folders[folders.length - 1];


  if (fileExistsInFolder(parentFolder, finalFileName + fileExtension)) {
    let count = 1;
    let originalFileName = finalFileName;
    do {
      finalFileName = originalFileName + count;
      count++;
    } while (fileExistsInFolder(parentFolder, finalFileName + fileExtension));
  }

  let blob;
  if (compress) {
    blob = Utilities.newBlob(content);
    const fileBytes = blob.getBytes();
    blob = compressGZip(fileBytes);
    blob.setName(finalFileName + fileExtension);
  } else {
    blob = Utilities.newBlob(content, 'application/octet-stream', finalFileName + fileExtension);
  }

  return parentFolder.createFile(blob).getId();
}

function deleteDungeon(folderID, id1, id2, deleteDungeonFiles) {

  if (!isCreator(folderID, id1, id2)) return 'UserID is incorrect!';

  if (deleteDungeonFiles) DriveApp.getFileById(folderID).setTrashed(true);


  const allPreviewFiles = DriveApp.getFolderById(PREVIEW_FOLDER).getFiles();
  while (allPreviewFiles.hasNext()) {
    const file = allPreviewFiles.next();
    if (file.getName().endsWith(folderID)) {
      file.setTrashed(true);
    }
  }

  const userIDFile = DriveApp.getFolderById(USER_ID_FOLDER).getFilesByName(folderID);
  while (userIDFile.hasNext()) {
    const file = userIDFile.next();
    file.setTrashed(true);
  }

  return true;

}

function listFiles(folderID, page, perPage) {

  const folder = DriveApp.getFolderById(folderID);
  const files = folder.getFiles();
  const fileList = [];

  while (files.hasNext()) {
    const file = files.next();
    fileList.push({
      id: file.getId(),
      name: file.getName(),
      dungeonID: file.getName().split('_').slice(1).join('_'),
    });
  }

  const numPreviews = fileList.length;

  fileList.sort((a, b) => a.name.localeCompare(b.name));

  const startIndex = page * perPage;
  const subset = fileList.slice(startIndex, startIndex + parseInt(perPage));

  subset.forEach(fileInfo => {
    const file = DriveApp.getFileById(fileInfo.id);
    fileInfo.content = file.getBlob().getDataAsString();
  });

  const numPreviewsObj = {
    numPreviews: numPreviews
  }
  subset.unshift(numPreviewsObj);

  return JSON.stringify(subset);
}


function fileExistsInFolder(folder, filename) {
  const files = folder.getFilesByName(filename);
  return files.hasNext();
}


function getAllFileIdsInFolder(folder, currentPath = '') {

  var result = [];

  var files = folder.getFiles();
  while (files.hasNext()) {
    var file = files.next();
    var filePath = currentPath + file.getName();
    result.push({ id: file.getId(), path: filePath});
  }

  var subfolders = folder.getFolders();
  while (subfolders.hasNext()) {
    var subfolder = subfolders.next();
    var path = currentPath + subfolder.getName() + '/';
    result = result.concat(getAllFileIdsInFolder(subfolder, path));
  }

  return result;
}

function getFileContent(fileID) {
  try {

    const file = DriveApp.getFileById(fileID);
    return decompressGZip(file.getBlob());

  } catch (error) {
    return "File not found! Maybe it was deleted. Try closing and reopening the window with all the downloadable dungeons and try again.\nDetails: " + error;
  }
}


function decompressGZip(compressedBlob) {
  try {
    return Utilities.ungzip(compressedBlob).getDataAsString();
  } catch (error) {
    console.error('Error during decompression:', error);
    return "Error during decompression:" + error;
  }
}

function compressGZip(decompressedBlob) {
  try {
    return Utilities.gzip(Utilities.newBlob(decompressedBlob));
  } catch (error) {
    console.error('Error during compression:', error);
    return "Error during compression:" + error;
  }
}


function readIntVersion(dungeonID) {
  const folder = DriveApp.getFolderById(PREVIEW_FOLDER);
  const files = folder.getFiles();
  while (files.hasNext()) {
    const file = files.next();
    if (file.getName().endsWith(dungeonID)) {
      return JSON.parse(file.getBlob().getDataAsString()).int_version;
    }
  }
  return 0;
}


function isCreator(dungeonID, id1, id2) {

  const folder = DriveApp.getFolderById(USER_ID_FOLDER);

  if (isUserBanned(id1, id2)) return "banned";
  if (!fileExistsInFolder(folder, dungeonID)) return false;

  const file = folder.getFilesByName(dungeonID);

  const content = file.next().getBlob().getDataAsString();
  const userIDFileContent = JSON.parse(content);

  return userIDFileContent.id1 == id1 && userIDFileContent.id2 == id2;

}

function isUserBanned(id1, id2) {

  const folder = DriveApp.getFolderById(BANNED_USER_FOLDER);
  const fileName = id1 + "&" + id2;

  return fileExistsInFolder(folder, fileName);
}


function hashUserIDOne(userID) {
  return hashUserID(userID, 1);
}

function hashUserIDTwo(userID) {
  return hashUserID(userID, 1638);
}

function hashUserID(userID, salt) {
  try {
    const combined = userID + salt;
    const hash = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, combined, Utilities.Charset.UTF_8);
    const hashedUserID = Utilities.base64Encode(hash);
    return hashedUserID;
  } catch (error) {
    console.error('Error hashing userID:', error);
    return null;
  }
}



function sendNotificationEmail(fileName, msg, description, int_version) {
  if (true) {
    MailApp.sendEmail({
      to: "alphadraxonis@gmail.com",
      subject: "SandboxPD File Upload: " + msg,
      body: "The file " + fileName + " has been uploaded."
        + "\nInternal version: " + int_version
        + "\nDescription: " + description
        + "\nTime: " + new Date().toDateString() + " " + new Date().toTimeString()
        + "\nThis E-Mail was sent automatically.",
    });
  }
}




//SUPPLY URL SCRIPT (This is the script it first connects to so it can then read the URL for the actual script. That way, I can update the real script later.)
const FOLDR     = "1miViNNWVeAaqg3GkCoO4HzcqolsRnKXc";
const FILE_NAME = "url.txt";

function doGet(e) {
  const folder = DriveApp.getFolderById(FOLDR);
  const file = folder.getFilesByName(FILE_NAME);
  const result = file.next().getBlob().getDataAsString();

  return ContentService.createTextOutput(result.toString())
    .setMimeType(ContentService.MimeType.TEXT);
}